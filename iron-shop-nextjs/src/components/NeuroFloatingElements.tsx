'use client'

import React, { useState, useEffect } from 'react'\nimport { useNeuroOptimization } from '@/hooks/useNeuroOptimization'\nimport Button from '@/components/ui/Button'\n\ninterface FloatingCTAProps {\n  onClose: () => void\n  isVisible: boolean\n}\n\nconst FloatingCTA: React.FC<FloatingCTAProps> = ({ onClose, isVisible }) => {\n  if (!isVisible) return null\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50 animate-neuro-pulse\">\n      <div className=\"bg-gradient-to-r from-red-500 to-orange-500 text-white p-4 rounded-2xl shadow-2xl max-w-sm border-2 border-white/20\">\n        <button \n          onClick={onClose}\n          className=\"absolute -top-2 -right-2 bg-white text-red-500 rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold hover:bg-red-500 hover:text-white transition-colors\"\n        >\n          ×\n        </button>\n        \n        <div className=\"flex items-start gap-3\">\n          <div className=\"bg-white/20 rounded-full p-2 flex-shrink-0\">\n            <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          \n          <div className=\"flex-1\">\n            <h3 className=\"font-bold text-lg mb-1\">特別限定オファー！</h3>\n            <p className=\"text-sm opacity-90 mb-3\">\n              今だけ初回相談料が無料<br />\n              残り<span className=\"font-bold\">2名様</span>のみ\n            </p>\n            \n            <Button\n              size=\"sm\"\n              variant=\"default\"\n              className=\"w-full bg-white text-red-600 hover:bg-red-50 font-bold\"\n              onClick={() => {\n                document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' })\n                onClose()\n              }}\n            >\n              今すぐ相談する →\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\ninterface ProgressBarProps {\n  progress: number\n}\n\nconst ScrollProgressBar: React.FC<ProgressBarProps> = ({ progress }) => {\n  return (\n    <div className=\"fixed top-0 left-0 w-full h-1 bg-gray-200 z-50\">\n      <div \n        className=\"h-full bg-gradient-to-r from-blue-500 to-purple-500 transition-all duration-300 ease-out\"\n        style={{ width: `${progress}%` }}\n      />\n    </div>\n  )\n}\n\ninterface SocialProofProps {\n  isVisible: boolean\n}\n\nconst SocialProofNotification: React.FC<SocialProofProps> = ({ isVisible }) => {\n  if (!isVisible) return null\n\n  return (\n    <div className=\"fixed bottom-6 left-6 z-40 animate-neuro-pulse\">\n      <div className=\"bg-white border border-gray-200 rounded-lg shadow-lg p-4 max-w-xs\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-gradient-to-r from-green-400 to-blue-500 rounded-full flex items-center justify-center\">\n            <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          \n          <div className=\"flex-1\">\n            <p className=\"text-sm font-semibold text-gray-800\">\n              田中様がオーダー完了\n            </p>\n            <p className=\"text-xs text-gray-500\">\n              3分前 • インダストリアルテーブル\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst NeuroFloatingElements: React.FC = () => {\n  const { neuroState } = useNeuroOptimization()\n  const [showFloatingCTA, setShowFloatingCTA] = useState(false)\n  const [showSocialProof, setShowSocialProof] = useState(false)\n  const [scrollProgress, setScrollProgress] = useState(0)\n  const [pageInteractionTime, setPageInteractionTime] = useState(0)\n\n  // スクロール進捗の追跡\n  useEffect(() => {\n    const updateScrollProgress = () => {\n      const scrollTop = window.scrollY\n      const docHeight = document.documentElement.scrollHeight - window.innerHeight\n      const progress = (scrollTop / docHeight) * 100\n      setScrollProgress(Math.min(100, Math.max(0, progress)))\n    }\n\n    window.addEventListener('scroll', updateScrollProgress)\n    return () => window.removeEventListener('scroll', updateScrollProgress)\n  }, [])\n\n  // ページ滞在時間の追跡\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setPageInteractionTime(prev => prev + 1)\n    }, 1000)\n\n    return () => clearInterval(timer)\n  }, [])\n\n  // フローティングCTAの表示ロジック\n  useEffect(() => {\n    if (pageInteractionTime > 30 && !neuroState.isHighEngagement) {\n      setShowFloatingCTA(true)\n    }\n  }, [pageInteractionTime, neuroState.isHighEngagement])\n\n  // ソーシャルプルーフの表示ロジック\n  useEffect(() => {\n    if (pageInteractionTime > 15 && scrollProgress > 20) {\n      setShowSocialProof(true)\n      \n      // 5秒後に非表示\n      const timer = setTimeout(() => {\n        setShowSocialProof(false)\n      }, 5000)\n      \n      return () => clearTimeout(timer)\n    }\n  }, [pageInteractionTime, scrollProgress])\n\n  // 離脱意図検知時の追加最適化\n  useEffect(() => {\n    const handleExitIntent = () => {\n      if (!showFloatingCTA) {\n        setShowFloatingCTA(true)\n      }\n    }\n\n    window.addEventListener('neuro:exitIntent', handleExitIntent)\n    return () => window.removeEventListener('neuro:exitIntent', handleExitIntent)\n  }, [showFloatingCTA])\n\n  return (\n    <>\n      <ScrollProgressBar progress={scrollProgress} />\n      \n      <FloatingCTA \n        isVisible={showFloatingCTA}\n        onClose={() => setShowFloatingCTA(false)}\n      />\n      \n      <SocialProofNotification isVisible={showSocialProof} />\n      \n      {/* 隠しメトリクス収集要素 */}\n      <div \n        style={{ position: 'fixed', top: '-9999px', left: '-9999px' }}\n        data-interaction-time={pageInteractionTime}\n        data-scroll-progress={scrollProgress}\n        data-neuro-state={JSON.stringify(neuroState)}\n      />\n    </>\n  )\n}\n\nexport default NeuroFloatingElements