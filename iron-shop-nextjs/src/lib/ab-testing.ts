/**\n * A/B Testing Engine with Neuro-Analytics Integration\n * 脳科学指標に基づく動的最適化システム\n */\n\nimport { neuroAnalytics } from './neuro-analytics'\n\ninterface ABVariant {\n  id: string\n  name: string\n  weight: number\n  config: Record<string, any>\n  conversionRate: number\n  neuroScore: number\n  trafficAllocation: number\n}\n\ninterface ABTest {\n  id: string\n  name: string\n  status: 'draft' | 'running' | 'paused' | 'completed'\n  startDate: Date\n  endDate?: Date\n  variants: ABVariant[]\n  targetMetric: string\n  confidenceLevel: number\n  minSampleSize: number\n  currentSampleSize: number\n}\n\ninterface UserSegment {\n  deviceType: 'mobile' | 'tablet' | 'desktop'\n  userAgent: string\n  location?: string\n  previousVisits: number\n  referralSource: string\n  timeOnSite: number\n}\n\nclass ABTestingEngine {\n  private static instance: ABTestingEngine\n  private tests: Map<string, ABTest> = new Map()\n  private userVariants: Map<string, string> = new Map()\n  private sessionId: string\n\n  private constructor() {\n    this.sessionId = this.generateSessionId()\n    this.initializeDefaultTests()\n  }\n\n  static getInstance(): ABTestingEngine {\n    if (!ABTestingEngine.instance) {\n      ABTestingEngine.instance = new ABTestingEngine()\n    }\n    return ABTestingEngine.instance\n  }\n\n  private generateSessionId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  private initializeDefaultTests(): void {\n    // ヒーローセクションのA/Bテスト\n    const heroTest: ABTest = {\n      id: 'hero-optimization-2024',\n      name: 'Hero Section Neuro-Optimization',\n      status: 'running',\n      startDate: new Date(),\n      variants: [\n        {\n          id: 'control',\n          name: 'Original Design',\n          weight: 50,\n          config: {\n            showUrgencyBadge: false,\n            showSocialProof: false,\n            ctaColor: 'blue',\n            headingStyle: 'standard'\n          },\n          conversionRate: 0,\n          neuroScore: 0,\n          trafficAllocation: 50\n        },\n        {\n          id: 'neuro-optimized',\n          name: 'Neuro-Optimized Design',\n          weight: 50,\n          config: {\n            showUrgencyBadge: true,\n            showSocialProof: true,\n            ctaColor: 'gradient',\n            headingStyle: 'gradient'\n          },\n          conversionRate: 0,\n          neuroScore: 0,\n          trafficAllocation: 50\n        }\n      ],\n      targetMetric: 'contact_form_submission',\n      confidenceLevel: 95,\n      minSampleSize: 100,\n      currentSampleSize: 0\n    }\n\n    this.tests.set(heroTest.id, heroTest)\n\n    // ギャラリーセクションのA/Bテスト\n    const galleryTest: ABTest = {\n      id: 'gallery-trust-signals-2024',\n      name: 'Gallery Trust Signals Test',\n      status: 'running',\n      startDate: new Date(),\n      variants: [\n        {\n          id: 'minimal',\n          name: 'Minimal Trust Signals',\n          weight: 50,\n          config: {\n            showRatings: false,\n            showScarcity: false,\n            showTrustBadges: false\n          },\n          conversionRate: 0,\n          neuroScore: 0,\n          trafficAllocation: 50\n        },\n        {\n          id: 'enhanced',\n          name: 'Enhanced Trust Signals',\n          weight: 50,\n          config: {\n            showRatings: true,\n            showScarcity: true,\n            showTrustBadges: true\n          },\n          conversionRate: 0,\n          neuroScore: 0,\n          trafficAllocation: 50\n        }\n      ],\n      targetMetric: 'gallery_interaction',\n      confidenceLevel: 95,\n      minSampleSize: 200,\n      currentSampleSize: 0\n    }\n\n    this.tests.set(galleryTest.id, galleryTest)\n  }\n\n  public getUserSegment(): UserSegment {\n    return {\n      deviceType: this.getDeviceType(),\n      userAgent: navigator.userAgent,\n      previousVisits: this.getPreviousVisits(),\n      referralSource: document.referrer || 'direct',\n      timeOnSite: 0 // Will be updated dynamically\n    }\n  }\n\n  private getDeviceType(): 'mobile' | 'tablet' | 'desktop' {\n    const width = window.innerWidth\n    if (width < 768) return 'mobile'\n    if (width < 1024) return 'tablet'\n    return 'desktop'\n  }\n\n  private getPreviousVisits(): number {\n    const visits = localStorage.getItem('iron-shop-visits')\n    return visits ? parseInt(visits, 10) : 0\n  }\n\n  public getVariant(testId: string): ABVariant | null {\n    const test = this.tests.get(testId)\n    if (!test || test.status !== 'running') return null\n\n    // 既にバリアントが割り当てられている場合は同じものを返す\n    const existingVariant = this.userVariants.get(testId)\n    if (existingVariant) {\n      return test.variants.find(v => v.id === existingVariant) || null\n    }\n\n    // ニューロメトリクスに基づく動的割り当て\n    const neuroMetrics = neuroAnalytics.calculateNeuroMetrics()\n    const userSegment = this.getUserSegment()\n    \n    const selectedVariant = this.selectVariantWithNeuroOptimization(\n      test.variants,\n      neuroMetrics,\n      userSegment\n    )\n\n    // バリアントを記録\n    this.userVariants.set(testId, selectedVariant.id)\n    \n    // ローカルストレージに保存（セッション継続性のため）\n    const userTests = JSON.parse(localStorage.getItem('ab-tests') || '{}')\n    userTests[testId] = selectedVariant.id\n    localStorage.setItem('ab-tests', JSON.stringify(userTests))\n\n    return selectedVariant\n  }\n\n  private selectVariantWithNeuroOptimization(\n    variants: ABVariant[],\n    neuroMetrics: any,\n    userSegment: UserSegment\n  ): ABVariant {\n    // 認知負荷が高い場合は、よりシンプルなバリアントを選択\n    if (neuroMetrics.cognitiveLoad > 70) {\n      return variants.find(v => v.id === 'control' || v.id === 'minimal') || variants[0]\n    }\n\n    // エンゲージメントが低い場合は、より刺激的なバリアントを選択\n    if (neuroMetrics.engagementRate < 40) {\n      return variants.find(v => v.id === 'neuro-optimized' || v.id === 'enhanced') || variants[1] || variants[0]\n    }\n\n    // モバイルユーザーには認知負荷の少ないバリアントを\n    if (userSegment.deviceType === 'mobile') {\n      return variants.find(v => v.id === 'control' || v.id === 'minimal') || variants[0]\n    }\n\n    // デフォルトはランダム選択（重み付き）\n    const totalWeight = variants.reduce((sum, variant) => sum + variant.weight, 0)\n    const random = Math.random() * totalWeight\n    \n    let currentWeight = 0\n    for (const variant of variants) {\n      currentWeight += variant.weight\n      if (random <= currentWeight) {\n        return variant\n      }\n    }\n\n    return variants[0]\n  }\n\n  public trackConversion(testId: string, conversionType: string, value?: number): void {\n    const test = this.tests.get(testId)\n    const variantId = this.userVariants.get(testId)\n    \n    if (!test || !variantId) return\n\n    const variant = test.variants.find(v => v.id === variantId)\n    if (!variant) return\n\n    // コンバージョンを記録\n    this.recordConversion({\n      testId,\n      variantId,\n      conversionType,\n      value: value || 1,\n      timestamp: new Date(),\n      sessionId: this.sessionId,\n      neuroMetrics: neuroAnalytics.calculateNeuroMetrics(),\n      userSegment: this.getUserSegment()\n    })\n\n    // リアルタイムでニューロスコアを更新\n    this.updateNeuroScore(testId, variantId)\n  }\n\n  private recordConversion(data: any): void {\n    // 実際の実装ではここでAnalyticsサービスに送信\n    console.log('AB Test Conversion:', data)\n    \n    // ローカルストレージに一時保存（デモ用）\n    const conversions = JSON.parse(localStorage.getItem('ab-conversions') || '[]')\n    conversions.push(data)\n    localStorage.setItem('ab-conversions', JSON.stringify(conversions))\n  }\n\n  private updateNeuroScore(testId: string, variantId: string): void {\n    const test = this.tests.get(testId)\n    if (!test) return\n\n    const variant = test.variants.find(v => v.id === variantId)\n    if (!variant) return\n\n    const neuroMetrics = neuroAnalytics.calculateNeuroMetrics()\n    \n    // ニューロスコアの計算（0-100）\n    const neuroScore = (\n      neuroMetrics.attentionScore * 0.3 +\n      (100 - neuroMetrics.cognitiveLoad) * 0.2 +\n      ((neuroMetrics.emotionalValence + 1) * 50) * 0.2 +\n      neuroMetrics.engagementRate * 0.3\n    )\n\n    variant.neuroScore = (variant.neuroScore + neuroScore) / 2 // 移動平均\n  }\n\n  public getTestResults(testId: string): any {\n    const test = this.tests.get(testId)\n    if (!test) return null\n\n    const conversions = JSON.parse(localStorage.getItem('ab-conversions') || '[]')\n    const testConversions = conversions.filter((c: any) => c.testId === testId)\n\n    const results = test.variants.map(variant => {\n      const variantConversions = testConversions.filter((c: any) => c.variantId === variant.id)\n      const conversionRate = variantConversions.length > 0 \n        ? (variantConversions.length / test.currentSampleSize) * 100 \n        : 0\n\n      return {\n        ...variant,\n        conversionRate,\n        conversions: variantConversions.length,\n        avgNeuroScore: variant.neuroScore\n      }\n    })\n\n    return {\n      test,\n      results,\n      winner: this.determineWinner(results),\n      confidence: this.calculateConfidence(results)\n    }\n  }\n\n  private determineWinner(results: any[]): any {\n    return results.reduce((winner, current) => \n      current.conversionRate > winner.conversionRate ? current : winner\n    )\n  }\n\n  private calculateConfidence(results: any[]): number {\n    // 簡単な統計的有意性の計算（実際はより複雑な統計手法を使用）\n    if (results.length < 2) return 0\n    \n    const [a, b] = results\n    const diffInConversion = Math.abs(a.conversionRate - b.conversionRate)\n    const totalConversions = a.conversions + b.conversions\n    \n    if (totalConversions < 30) return 0 // サンプルサイズが小さすぎる\n    \n    return Math.min(95, diffInConversion * 2) // 簡易計算\n  }\n\n  public optimizeInRealTime(): void {\n    // リアルタイム最適化：パフォーマンスの低いバリアントのトラフィックを減らす\n    for (const [testId, test] of this.tests) {\n      if (test.status !== 'running' || test.currentSampleSize < test.minSampleSize) continue\n\n      const results = this.getTestResults(testId)\n      if (!results || results.confidence < 85) continue\n\n      // 勝者により多くのトラフィックを割り当て\n      const winner = results.winner\n      const loser = results.results.find((r: any) => r.id !== winner.id)\n      \n      if (winner && loser) {\n        // 勝者に70%、敗者に30%の割り当て\n        winner.trafficAllocation = 70\n        loser.trafficAllocation = 30\n        \n        console.log(`🧠 Real-time optimization: ${winner.name} is winning with ${winner.conversionRate.toFixed(2)}% conversion rate`)\n      }\n    }\n  }\n}\n\n// Singleton export\nexport const abTesting = ABTestingEngine.getInstance()\n\n// Helper functions for components\nexport const useABTest = (testId: string) => {\n  const variant = abTesting.getVariant(testId)\n  \n  const trackConversion = (conversionType: string, value?: number) => {\n    abTesting.trackConversion(testId, conversionType, value)\n  }\n\n  return { variant, trackConversion }\n}\n\nexport const trackABConversion = (testId: string, conversionType: string, value?: number) => {\n  abTesting.trackConversion(testId, conversionType, value)\n}